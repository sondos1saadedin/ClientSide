{"version":3,"file":"dx-grid-core.umd.js","sources":["../src/plugins/grid-core/computeds.js","../src/plugins/sorting-state/reducers.js","../src/plugins/sorting-state/helpers.js","../src/utils/merge-sort.js","../src/utils/hierarchical-data.js","../src/plugins/integrated-sorting/computeds.js","../src/plugins/filtering-state/reducers.js","../src/plugins/filtering-state/helpers.js","../src/plugins/integrated-filtering/computeds.js","../src/plugins/grouping-state/constants.js","../src/plugins/grouping-state/reducers.js","../src/plugins/integrated-grouping/constants.js","../src/plugins/integrated-grouping/computeds.js","../src/plugins/custom-grouping/computeds.js","../src/plugins/grouping-panel/helpers.js","../src/plugins/paging-state/reducers.js","../src/plugins/integrated-paging/computeds.js","../src/plugins/paging-panel/helpers.js","../src/plugins/selection-state/reducers.js","../src/plugins/integrated-selection/computeds.js","../src/plugins/editing-state/reducers.js","../src/plugins/editing-state/computeds.js","../src/plugins/editing-state/helpers.js","../src/plugins/table-column-reordering/constants.js","../src/plugins/table-column-reordering/reducers.js","../src/plugins/table/constants.js","../src/plugins/table-column-reordering/computeds.js","../src/plugins/table-column-resizing/computeds.js","../src/plugins/table-column-resizing/reducers.js","../src/plugins/table-edit-column/constants.js","../src/plugins/table-edit-row/constants.js","../src/plugins/table-header-row/constants.js","../src/plugins/table-edit-column/helpers.js","../src/plugins/table-edit-column/computeds.js","../src/plugins/table-edit-row/helpers.js","../src/plugins/table-edit-row/computeds.js","../src/plugins/table-filter-row/constants.js","../src/plugins/table-filter-row/helpers.js","../src/plugins/table-filter-row/computeds.js","../src/plugins/table-group-row/constants.js","../src/plugins/table-group-row/helpers.js","../src/plugins/table-group-row/computeds.js","../src/plugins/table-header-row/helpers.js","../src/plugins/table-header-row/computeds.js","../src/plugins/table-row-detail/constants.js","../src/plugins/table-row-detail/helpers.js","../src/plugins/table-row-detail/reducers.js","../src/plugins/table-row-detail/computeds.js","../src/plugins/table-selection/constants.js","../src/plugins/table-selection/helpers.js","../src/plugins/table-selection/computeds.js","../src/plugins/table/helpers.js","../src/utils/column-extension.js","../src/plugins/table/computeds.js","../src/plugins/table-column-visibility/computeds.js","../src/plugins/table-column-visibility/helpers.js","../src/plugins/column-chooser/computeds.js","../src/plugins/column-chooser/reducers.js","../src/plugins/search-state/reducers.js","../src/utils/column-geometries.js","../src/utils/table.js","../src/utils/group-panel.js","../src/utils/messages-formatter.js"],"sourcesContent":["export const rowIdGetter = (getRowId, rows) => {\n  if (!getRowId) {\n    const map = new Map(rows.map((row, rowIndex) => [row, rowIndex]));\n    return row => map.get(row);\n  }\n  return getRowId;\n};\n\nconst defaultGetCellValue = (row, columnName) => row[columnName];\nexport const cellValueGetter = (getCellValue = defaultGetCellValue, columns) => {\n  let useFastAccessor = true;\n  const map = columns.reduce((acc, column) => {\n    if (column.getCellValue) {\n      useFastAccessor = false;\n      acc[column.name] = column.getCellValue;\n    }\n    return acc;\n  }, {});\n\n  if (useFastAccessor) {\n    return getCellValue;\n  }\n\n  return (row, columnName) => (map[columnName]\n    ? map[columnName](row, columnName)\n    : getCellValue(row, columnName));\n};\n","export const changeColumnSorting = (state, {\n  columnName, direction, keepOther, sortIndex,\n}) => {\n  const { sorting } = state;\n\n  let nextSorting = [];\n  if (keepOther === true) {\n    nextSorting = sorting.slice();\n  }\n  if (Array.isArray(keepOther)) {\n    nextSorting = sorting.slice()\n      .filter(columnSorting => keepOther.indexOf(columnSorting.columnName) > -1);\n  }\n\n  const columnSortingIndex = sorting\n    .findIndex(columnSorting => columnSorting.columnName === columnName);\n  const columnSorting = sorting[columnSortingIndex];\n  const newColumnSorting = {\n    columnName,\n    direction: direction ||\n      (!columnSorting || columnSorting.direction === 'desc' ? 'asc' : 'desc'),\n  };\n\n  if (columnSortingIndex > -1) {\n    nextSorting.splice(columnSortingIndex, 1);\n  }\n\n  if (direction !== null) {\n    const newIndexFallback = columnSortingIndex > -1 ? columnSortingIndex : nextSorting.length;\n    const newIndex = sortIndex !== undefined ? sortIndex : newIndexFallback;\n    nextSorting.splice(newIndex, 0, newColumnSorting);\n  }\n\n  return {\n    sorting: nextSorting,\n  };\n};\n","const unique = arr => [...new Set(arr)];\n\nexport const getColumnSortingDirection = (sorting, columnName) => {\n  const columnSorting = sorting.filter(s => s.columnName === columnName)[0];\n  return columnSorting ? columnSorting.direction : null;\n};\n\nexport const getPersistentSortedColumns = (sorting, columnExtensions = []) =>\n  columnExtensions.reduce((acc, { columnName, sortingEnabled }) => {\n    if (sortingEnabled === false) {\n      if (sorting.findIndex(sortItem => sortItem.columnName === columnName) > -1) {\n        acc.push(columnName);\n      }\n    }\n    return acc;\n  }, []);\n\nexport const calculateKeepOther = (sorting, keepOther, persistentSortedColumns = []) => {\n  if (!persistentSortedColumns.length) return keepOther;\n  if (!keepOther) return persistentSortedColumns;\n\n  return Array.isArray(keepOther)\n    ? unique([...keepOther, ...persistentSortedColumns])\n    : unique([...sorting.map(item => item.columnName), ...persistentSortedColumns]);\n};\n","/* eslint-disable no-plusplus, no-param-reassign, no-use-before-define, no-constant-condition */\n\nconst merge = (array, auxiliary, lo, mid, hi, compare) => {\n  let i = lo;\n  let j = mid + 1;\n  let k = lo;\n  while (true) {\n    const cmp = compare(array[i], array[j]);\n    if (cmp <= 0) {\n      auxiliary[k++] = array[i++];\n      if (i > mid) {\n        do {\n          auxiliary[k++] = array[j++];\n        } while (j <= hi);\n        break;\n      }\n    } else {\n      auxiliary[k++] = array[j++];\n      if (j > hi) {\n        do {\n          auxiliary[k++] = array[i++];\n        } while (i <= mid);\n        break;\n      }\n    }\n  }\n};\n\nconst sortArrayToAuxiliary = (array, auxiliary, lo, hi, compare) => {\n  if (hi < lo) return;\n  if (hi === lo) {\n    auxiliary[lo] = array[lo];\n    return;\n  }\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortAuxiliaryToArray(array, auxiliary, lo, mid, compare);\n  sortAuxiliaryToArray(array, auxiliary, mid + 1, hi, compare);\n  merge(array, auxiliary, lo, mid, hi, compare);\n};\n\nconst sortAuxiliaryToArray = (array, auxiliary, lo, hi, compare) => {\n  if (hi <= lo) return;\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortArrayToAuxiliary(array, auxiliary, lo, mid, compare);\n  sortArrayToAuxiliary(array, auxiliary, mid + 1, hi, compare);\n  merge(auxiliary, array, lo, mid, hi, compare);\n};\n\nexport default (\n  array,\n  compare = (a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  },\n) => {\n  const result = array.slice();\n  const auxiliary = array.slice();\n  sortAuxiliaryToArray(result, auxiliary, 0, result.length - 1, compare);\n  return result;\n};\n","export const NODE_CHECK = Symbol('node');\n\nexport const rowsToTree = (rows, getRowLevelKey) => {\n  if (!rows.length) return rows;\n\n  const levels = [{ children: [] }];\n\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.slice(1)\n        .findIndex(level => getRowLevelKey(level.root) === levelKey) + 1;\n      if (levelIndex > 0) {\n        levels.splice(levelIndex, levels.length - levelIndex);\n      }\n      const node = { [NODE_CHECK]: true, root: row, children: [] };\n      levels[levels.length - 1].children.push(node);\n      levels.push(node);\n    } else {\n      levels[levels.length - 1].children.push(row);\n    }\n  });\n\n  return levels[0].children;\n};\n\nexport const treeToRows = (tree, rows = []) => {\n  if (!tree.length) return tree;\n  return tree.reduce(\n    (acc, node) => {\n      if (node[NODE_CHECK]) {\n        acc.push(node.root);\n        treeToRows(node.children, rows);\n      } else {\n        acc.push(node);\n      }\n      return acc;\n    },\n    rows,\n  );\n};\n","import mergeSort from '../../utils/merge-sort';\nimport { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst defaultCompare = (a, b) => {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n\nconst createCompare = (sorting, getColumnCompare, getComparableValue) =>\n  sorting.slice()\n    .reverse()\n    .reduce(\n      (prevCompare, columnSorting) => {\n        const { columnName } = columnSorting;\n        const inverse = columnSorting.direction === 'desc';\n        const columnCompare = (getColumnCompare && getColumnCompare(columnName)) || defaultCompare;\n\n        return (aRow, bRow) => {\n          const a = getComparableValue(aRow, columnName);\n          const b = getComparableValue(bRow, columnName);\n          const result = columnCompare(a, b);\n\n          if (result !== 0) {\n            return inverse ? -result : result;\n          }\n          return prevCompare(aRow, bRow);\n        };\n      },\n      () => 0,\n    );\n\nconst sortTree = (tree, compare) => {\n  const sortedTree = tree.map((node) => {\n    if (node[NODE_CHECK]) {\n      return {\n        ...node,\n        children: sortTree(node.children, compare),\n      };\n    }\n    return node;\n  });\n\n  return mergeSort(sortedTree, (a, b) =>\n    compare(a[NODE_CHECK] ? a.root : a, b[NODE_CHECK] ? b.root : b));\n};\n\nconst sortHierarchicalRows = (rows, compare, getRowLevelKey) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n\n  const sortedTree = sortTree(tree, compare);\n\n  return treeToRows(sortedTree);\n};\n\nexport const sortedRows = (\n  rows,\n  sorting,\n  getCellValue,\n  getColumnCompare,\n  isGroupRow,\n  getRowLevelKey,\n) => {\n  if (!sorting.length || !rows.length) return rows;\n\n  if (!getRowLevelKey) {\n    const compare = createCompare(sorting, getColumnCompare, getCellValue);\n    return mergeSort(rows.slice(), compare);\n  }\n\n  const compare = createCompare(sorting, getColumnCompare, (row, columnName) => {\n    if (isGroupRow(row)) {\n      if (row.groupedBy === columnName) {\n        return row.value;\n      }\n      return undefined;\n    }\n    return getCellValue(row, columnName);\n  });\n  return sortHierarchicalRows(\n    rows,\n    compare,\n    getRowLevelKey,\n  );\n};\n","export const changeColumnFilter = (filters, { columnName, config }) => {\n  const filterIndex = filters.findIndex(f => f.columnName === columnName);\n  const nextState = filters.slice();\n\n  if (config) {\n    const filter = { columnName, ...config };\n    if (filterIndex > -1) {\n      nextState.splice(filterIndex, 1, filter);\n    } else {\n      nextState.push(filter);\n    }\n  } else {\n    nextState.splice(filterIndex, 1);\n  }\n\n  return nextState;\n};\n\nexport const pushFilterExpression = filters => ({ filterExpression }) => {\n  const selfFilterExpr = { operator: 'and', filters };\n  if (!filterExpression) {\n    return selfFilterExpr;\n  }\n  return {\n    operator: 'and',\n    filters: [filterExpression, selfFilterExpr],\n  };\n};\n","export const getColumnFilterConfig = (filters, columnName) => {\n  if (!filters.length) { return null; }\n\n  const filter = filters.filter(s => s.columnName === columnName)[0];\n  if (!filter) return null;\n\n  const { columnName: _, ...config } = filter;\n  return config;\n};\n","import { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst AND = predicates => row =>\n  predicates.reduce((acc, predicate) => acc && predicate(row), true);\n\nconst OR = predicates => row =>\n  predicates.reduce((acc, predicate) => acc || predicate(row), false);\n\nconst operators = { or: OR, and: AND };\n\nconst toLowerCase = value => String(value).toLowerCase();\n\nconst defaultPredicate = (value, filter) =>\n  toLowerCase(value).indexOf(toLowerCase(filter.value)) > -1;\n\nconst filterTree = (tree, predicate) =>\n  tree.reduce((acc, node) => {\n    if (node[NODE_CHECK]) {\n      const filteredChildren = filterTree(node.children, predicate);\n      if (filteredChildren.length > 0) {\n        acc.push({\n          ...node,\n          children: filteredChildren,\n        });\n        return acc;\n      } else if (predicate(node.root)) {\n        acc.push(node.root);\n        return acc;\n      }\n    }\n\n    if (predicate(node)) {\n      acc.push(node);\n      return acc;\n    }\n\n    return acc;\n  }, []);\n\nconst filterHierarchicalRows = (rows, predicate, getRowLevelKey, isGroupRow) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n\n  const filteredTree = filterTree(\n    tree,\n    row => (isGroupRow(row)\n      ? row.collapsedRows && row.collapsedRows.findIndex(predicate) > -1\n      : predicate(row)),\n  );\n\n  return treeToRows(filteredTree);\n};\n\nconst buildPredicate = (\n  initialFilterExpression,\n  getCellValue,\n  getColumnPredicate,\n) => {\n  const getSimplePredicate = (filterExpression) => {\n    const { columnName } = filterExpression;\n    const customPredicate = getColumnPredicate && getColumnPredicate(columnName);\n    const predicate = customPredicate || defaultPredicate;\n    return row =>\n      predicate(getCellValue(row, columnName), filterExpression, row);\n  };\n\n  const getOperatorPredicate = (filterExpression) => {\n    const build = operators[toLowerCase(filterExpression.operator)];\n    // eslint-disable-next-line no-use-before-define\n    return build && build(filterExpression.filters.map(getPredicate));\n  };\n\n  const getPredicate = filterExpression =>\n    getOperatorPredicate(filterExpression) ||\n    getSimplePredicate(filterExpression);\n\n  return getPredicate(initialFilterExpression);\n};\n\nexport const filteredRows = (\n  rows,\n  filterExpression,\n  getCellValue,\n  getColumnPredicate,\n  isGroupRow,\n  getRowLevelKey,\n) => {\n  if (\n    !(\n      filterExpression &&\n      Object.keys(filterExpression).length &&\n      rows.length\n    )\n  ) {\n    return rows;\n  }\n\n  const predicate = buildPredicate(\n    filterExpression,\n    getCellValue,\n    getColumnPredicate,\n  );\n\n  return getRowLevelKey\n    ? filterHierarchicalRows(rows, predicate, getRowLevelKey, isGroupRow)\n    : rows.filter(predicate);\n};\n","export const GROUP_KEY_SEPARATOR = '|';\n","import { GROUP_KEY_SEPARATOR } from './constants';\n\nconst applyColumnGrouping = (grouping, { columnName, groupIndex }) => {\n  const nextGrouping = grouping.slice();\n  const groupingIndex = nextGrouping.findIndex(g => g.columnName === columnName);\n  let targetIndex = groupIndex;\n\n  if (groupingIndex > -1) {\n    nextGrouping.splice(groupingIndex, 1);\n  } else if (groupIndex === undefined) {\n    targetIndex = nextGrouping.length;\n  }\n\n  if (targetIndex > -1) {\n    nextGrouping.splice(targetIndex, 0, {\n      columnName,\n    });\n  }\n\n  return nextGrouping;\n};\n\nexport const changeColumnGrouping = ({ grouping, expandedGroups }, { columnName, groupIndex }) => {\n  const nextGrouping = applyColumnGrouping(grouping, { columnName, groupIndex });\n\n  const ungroupedColumnIndex = grouping.findIndex((group, index) =>\n    !nextGrouping[index] || group.columnName !== nextGrouping[index].columnName);\n  if (ungroupedColumnIndex === -1) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  const filteredExpandedGroups = expandedGroups.filter(group =>\n    group.split(GROUP_KEY_SEPARATOR).length <= ungroupedColumnIndex);\n  if (filteredExpandedGroups.length === expandedGroups.length) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  return {\n    grouping: nextGrouping,\n    expandedGroups: filteredExpandedGroups,\n  };\n};\n\nexport const toggleExpandedGroups = (state, { groupKey }) => {\n  const expandedGroups = state.expandedGroups.slice();\n  const groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return {\n    expandedGroups,\n  };\n};\n\nexport const draftColumnGrouping = ({ grouping, draftGrouping }, { columnName, groupIndex }) => ({\n  draftGrouping: applyColumnGrouping(draftGrouping || grouping, { columnName, groupIndex }),\n});\n\nexport const cancelColumnGroupingDraft = () => ({\n  draftGrouping: null,\n});\n","export const GRID_GROUP_TYPE = 'group';\nexport const GRID_GROUP_CHECK = Symbol(`${GRID_GROUP_TYPE}_check`);\nexport const GRID_GROUP_LEVEL_KEY = Symbol(`${GRID_GROUP_TYPE}_levelKey`);\n\n","import { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n} from './constants';\n\nexport const groupRowChecker = row => row[GRID_GROUP_CHECK];\n\nexport const groupRowLevelKeyGetter = row => row[GRID_GROUP_LEVEL_KEY];\n\nconst defaultColumnCriteria = value => ({\n  key: String(value),\n  value,\n});\n\nexport const groupedRows = (\n  rows,\n  grouping,\n  getCellValue,\n  getColumnCriteria,\n  keyPrefix = '',\n) => {\n  if (!grouping.length) return rows;\n\n  const { columnName } = grouping[0];\n  const groupCriteria = (getColumnCriteria && getColumnCriteria(columnName))\n    || defaultColumnCriteria;\n  const groups = rows\n    .reduce((acc, row) => {\n      const { key, value = key } = groupCriteria(getCellValue(row, columnName), row);\n      const sameKeyItems = acc.get(key);\n\n      if (!sameKeyItems) {\n        acc.set(key, [value, key, [row]]);\n      } else {\n        sameKeyItems[2].push(row);\n      }\n      return acc;\n    }, new Map());\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return [...groups.values()]\n    .reduce((acc, [value, key, items]) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...groupedRows(\n        items,\n        nestedGrouping,\n        getCellValue,\n        getColumnCriteria,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const expandedGroupRows = (rows, grouping, expandedGroups) => {\n  if (!grouping.length) return rows;\n\n  const groupingColumnNames = grouping.map(columnGrouping => columnGrouping.columnName);\n  const expandedGroupsSet = new Set(expandedGroups);\n  let currentGroupExpanded = true;\n  let currentGroupLevel = 0;\n\n  return rows.reduce((acc, row) => {\n    if (!row[GRID_GROUP_CHECK]) {\n      if (currentGroupExpanded) {\n        acc.push(row);\n      } else {\n        acc[acc.length - 1].collapsedRows.push(row);\n      }\n      return acc;\n    }\n\n    const groupLevel = groupingColumnNames.indexOf(row.groupedBy);\n    if (groupLevel > currentGroupLevel && !currentGroupExpanded) {\n      return acc;\n    }\n\n    currentGroupExpanded = expandedGroupsSet.has(row.compoundKey);\n    currentGroupLevel = groupLevel;\n\n    if (currentGroupExpanded) {\n      acc.push(row);\n    } else {\n      acc.push({\n        ...row,\n        collapsedRows: [],\n      });\n    }\n\n    return acc;\n  }, []);\n};\n","import { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n} from '../integrated-grouping/constants';\n\nexport const customGroupedRows = (\n  currentRows,\n  grouping,\n  getChildGroups,\n  rootRows = currentRows,\n  keyPrefix = '',\n) => {\n  if (!currentRows || !currentRows.length) return [];\n  if (!grouping.length) return currentRows;\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return getChildGroups(currentRows, grouping[0], rootRows)\n    .reduce((acc, { key, value = key, childRows }) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...customGroupedRows(\n        childRows,\n        nestedGrouping,\n        getChildGroups,\n        rootRows,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const customGroupingRowIdGetter = (getRowId, rows) => {\n  const firstRow = rows.find(row => !row[GRID_GROUP_CHECK]);\n  if (!firstRow || getRowId(firstRow)) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .filter(row => !row[GRID_GROUP_CHECK])\n    .map((row, rowIndex) => [row, rowIndex]));\n\n  return row => map.get(row);\n};\n","export const groupingPanelItems = (columns, grouping, draftGrouping) => {\n  const items = draftGrouping.map(({ columnName }) => ({\n    column: columns.find(c => c.name === columnName),\n    draft: !grouping.some(columnGrouping => columnGrouping.columnName === columnName),\n  }));\n\n  grouping.forEach(({ columnName }, index) => {\n    if (draftGrouping.some(columnGrouping => columnGrouping.columnName === columnName)) return;\n    items.splice(index, 0, {\n      column: columns.find(c => c.name === columnName),\n      draft: true,\n    });\n  });\n\n  return items;\n};\n","export const setCurrentPage = (prevPage, page) => page;\nexport const setPageSize = (prevPageSize, size) => size;\n","const PAGE_HEADERS_OVERFLOW_ERROR =\n  'Max row level exceeds the page size. Consider increasing the page size.';\n\nexport const paginatedRows = (rows, pageSize, page) => (\n  pageSize ?\n    rows.slice(pageSize * page, pageSize * (page + 1)) :\n    rows\n);\n\nexport const rowsWithPageHeaders = (rows, pageSize, getRowLevelKey) => {\n  if (!pageSize || !getRowLevelKey) return rows;\n\n  let result = rows.slice();\n\n  let headerRows = [];\n  let currentIndex = 0;\n  while (result.length > currentIndex) {\n    const row = result[currentIndex];\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const headerIndex = headerRows.findIndex(headerRow => getRowLevelKey(headerRow) === levelKey);\n      if (headerIndex === -1) {\n        headerRows = [...headerRows, row];\n      } else {\n        headerRows = [...headerRows.slice(0, headerIndex), row];\n      }\n      if (headerRows.length >= pageSize) {\n        throw new Error(PAGE_HEADERS_OVERFLOW_ERROR);\n      }\n    }\n    const indexInPage = currentIndex % pageSize;\n    if (indexInPage < headerRows.length && row !== headerRows[indexInPage]) {\n      result = [\n        ...result.slice(0, currentIndex),\n        headerRows[indexInPage],\n        ...result.slice(currentIndex),\n      ];\n    }\n    currentIndex += 1;\n  }\n\n  return result;\n};\n\nexport const pageCount = (count, pageSize) => (\n  pageSize ? Math.ceil(count / pageSize) : 1\n);\n\nexport const rowCount = rows => rows.length;\n","export const firstRowOnPage = (currentPage, pageSize, totalCount) => {\n  if (totalCount === 0) {\n    return 0;\n  }\n  return pageSize ? (currentPage * pageSize) + 1 : 1;\n};\n\nexport const lastRowOnPage = (currentPage, pageSize, totalRowCount) => {\n  let result = totalRowCount;\n  if (pageSize) {\n    const index = (currentPage + 1) * pageSize;\n    result = index > totalRowCount ? totalRowCount : index;\n  }\n\n  return result;\n};\n","export const toggleSelection = (selection, { rowIds, state }) => {\n  const rowIdsSet = new Set(rowIds);\n\n  let rowsState = state;\n  if (rowsState === undefined) {\n    const availableSelection = selection.filter(rowId => rowIdsSet.has(rowId));\n    rowsState = availableSelection.length !== rowIdsSet.size;\n  }\n\n  if (rowsState) {\n    const selectionSet = new Set(selection);\n    return [\n      ...selection,\n      ...rowIds.filter(rowId => !selectionSet.has(rowId)),\n    ];\n  }\n\n  return selection.filter(rowId => !rowIdsSet.has(rowId));\n};\n","export const rowsWithAvailableToSelect = (rows, getRowId, isGroupRow) => {\n  let dataRows = rows;\n  if (isGroupRow) {\n    dataRows = dataRows.filter(row => !isGroupRow(row));\n  }\n  return { rows, availableToSelect: dataRows.map(row => getRowId(row)) };\n};\n\nexport const someSelected = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return availableToSelect.length !== 0 && selectionSet.size !== 0\n    && availableToSelect.some(elem => selectionSet.has(elem))\n    && availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const allSelected = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return selectionSet.size !== 0 && availableToSelect.length !== 0\n    && !availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const unwrapSelectedRows = ({ rows }) => rows;\n","export const startEditRows = (prevEditingRowIds, { rowIds }) =>\n  [...prevEditingRowIds, ...rowIds];\n\nexport const stopEditRows = (prevEditingRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return prevEditingRowIds.filter(id => !rowIdSet.has(id));\n};\n\nexport const addRow = (addedRows, { row } = { row: {} }) => [...addedRows, row];\n\nexport const changeAddedRow = (addedRows, { rowId, change }) => {\n  const result = addedRows.slice();\n  result[rowId] = { ...result[rowId], ...change };\n  return result;\n};\n\nexport const cancelAddedRows = (addedRows, { rowIds }) => {\n  const result = [];\n  const indexSet = new Set(rowIds);\n  addedRows.forEach((row, index) => {\n    if (!indexSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nexport const changeRow = (prevRowChanges, { rowId, change }) => {\n  const prevChange = prevRowChanges[rowId] || {};\n  return {\n    ...prevRowChanges,\n    [rowId]: {\n      ...prevChange,\n      ...change,\n    },\n  };\n};\n\nexport const cancelChanges = (prevRowChanges, { rowIds }) => {\n  const result = { ...prevRowChanges };\n  rowIds.forEach((rowId) => {\n    delete result[rowId];\n  });\n  return result;\n};\n\nexport const deleteRows = (deletedRowIds, { rowIds }) => [...deletedRowIds, ...rowIds];\n\nexport const cancelDeletedRows = (deletedRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return deletedRowIds.filter(rowId => !rowIdSet.has(rowId));\n};\n","export const changedRowsByIds = (changes, rowIds) => {\n  const result = {};\n  rowIds.forEach((rowId) => {\n    result[rowId] = changes[rowId];\n  });\n  return result;\n};\n\nexport const addedRowsByIds = (addedRows, rowIds) => {\n  const rowIdSet = new Set(rowIds);\n  const result = [];\n  addedRows.forEach((row, index) => {\n    if (rowIdSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nconst defaultCreateRowChange = (row, value, columnName) => ({ [columnName]: value });\nexport const createRowChangeGetter = (\n  createRowChange = defaultCreateRowChange,\n  columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    if (columnExtension.createRowChange) {\n      acc[columnExtension.columnName] = columnExtension.createRowChange;\n    }\n    return acc;\n  }, {});\n\n  return (row, value, columnName) => {\n    if (map[columnName]) {\n      return map[columnName](row, value, columnName);\n    }\n    return createRowChange(row, value, columnName);\n  };\n};\n","export const getRowChange = (rowChanges, rowId) => rowChanges[rowId] || {};\n","export const TABLE_REORDERING_TYPE = 'reordering';\n","export const changeColumnOrder = (order, { sourceColumnName, targetColumnName }) => {\n  const sourceColumnIndex = order.indexOf(sourceColumnName);\n  const targetColumnIndex = order.indexOf(targetColumnName);\n  const newOrder = order.slice();\n\n  newOrder.splice(sourceColumnIndex, 1);\n  newOrder.splice(targetColumnIndex, 0, sourceColumnName);\n  return newOrder;\n};\n","export const TABLE_DATA_TYPE = 'data';\nexport const TABLE_NODATA_TYPE = 'nodata';\n","import mergeSort from '../../utils/merge-sort';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_REORDERING_TYPE } from './constants';\n\nexport const orderedColumns = (tableColumns, order) =>\n  mergeSort(tableColumns, (a, b) => {\n    if (a.type !== TABLE_DATA_TYPE || b.type !== TABLE_DATA_TYPE) return 0;\n\n    const aPos = order.indexOf(a.column.name);\n    const bPos = order.indexOf(b.column.name);\n    return aPos - bPos;\n  });\n\nexport const tableHeaderRowsWithReordering = tableHeaderRows => [\n  {\n    key: TABLE_REORDERING_TYPE,\n    type: TABLE_REORDERING_TYPE,\n    height: 0,\n  },\n  ...tableHeaderRows,\n];\n\nexport const draftOrder = (order, sourceColumnIndex, targetColumnIndex) => {\n  if (sourceColumnIndex === -1\n    || targetColumnIndex === -1\n    || sourceColumnIndex === targetColumnIndex) {\n    return order;\n  }\n\n  const result = order.slice();\n  const sourceColumn = order[sourceColumnIndex];\n  result.splice(sourceColumnIndex, 1);\n  result.splice(targetColumnIndex, 0, sourceColumn);\n\n  return result;\n};\n","const UNSET_COLUMN_WIDTH_ERROR = [\n  'The \"$1\" column\\'s width is not specified.',\n  'The TableColumnResizing plugin requires that all columns have the specified width.',\n].join('\\n');\n\nexport const tableColumnsWithWidths = (tableColumns, columnWidths, draftColumnWidths) =>\n  tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type === 'data') {\n        const columnName = tableColumn.column.name;\n        const isCurrentColumn = elem => elem.columnName === columnName;\n        const column = draftColumnWidths.find(isCurrentColumn)\n          || columnWidths.find(isCurrentColumn);\n        const width = column && column.width;\n        if (width === undefined) {\n          throw new Error(UNSET_COLUMN_WIDTH_ERROR.replace('$1', columnName));\n        }\n        acc.push({ ...tableColumn, width });\n      } else {\n        acc.push(tableColumn);\n      }\n      return acc;\n    }, []);\n","const MIN_SIZE = 40;\n\nexport const changeTableColumnWidth = (state, { columnName, shift }) => {\n  const { columnWidths } = state;\n  const nextColumnWidth = columnWidths.slice();\n  const index = nextColumnWidth.findIndex(elem => elem.columnName === columnName);\n  const updatedColumn = nextColumnWidth[index];\n  const size = Math.max(MIN_SIZE, updatedColumn.width + shift);\n  nextColumnWidth.splice(index, 1, { columnName, width: size });\n\n  return {\n    columnWidths: nextColumnWidth,\n  };\n};\n\nexport const draftTableColumnWidth = (state, { columnName, shift }) => {\n  const { columnWidths } = state;\n  const updatedColumn = columnWidths.find(elem => elem.columnName === columnName);\n  const size = Math.max(MIN_SIZE, updatedColumn.width + shift);\n\n  return {\n    draftColumnWidths: [{ columnName: updatedColumn.columnName, width: size }],\n  };\n};\n\nexport const cancelTableColumnWidthDraft = () => ({\n  draftColumnWidths: [],\n});\n","export const TABLE_EDIT_COMMAND_TYPE = 'editCommand';\n","export const TABLE_ADDED_TYPE = 'added';\nexport const TABLE_EDIT_TYPE = 'edit';\n","export const TABLE_HEADING_TYPE = 'heading';\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from '../table-edit-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const isHeadingEditCommandsTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\nexport const isEditCommandsTableCell = (tableRow, tableColumn) =>\n  (tableRow.type === TABLE_DATA_TYPE || tableRow.type === TABLE_ADDED_TYPE\n  || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n","import { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const tableColumnsWithEditing = (tableColumns, width) =>\n  [{ key: TABLE_EDIT_COMMAND_TYPE, type: TABLE_EDIT_COMMAND_TYPE, width }, ...tableColumns];\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isEditTableCell = (tableRow, tableColumn) =>\n  (tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE)\n  && tableColumn.type === TABLE_DATA_TYPE;\nexport const isAddedTableRow = tableRow =>\n  tableRow.type === TABLE_ADDED_TYPE;\nexport const isEditTableRow = tableRow =>\n  tableRow.type === TABLE_EDIT_TYPE;\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithEditing = (tableRows, editingRowIds, addedRows, rowHeight) => {\n  const rowIds = new Set(editingRowIds);\n  const editedTableRows = tableRows\n    .map(tableRow => (\n      tableRow.type === TABLE_DATA_TYPE && rowIds.has(tableRow.rowId)\n        ? {\n          ...tableRow,\n          type: TABLE_EDIT_TYPE,\n          height: rowHeight,\n        }\n        : tableRow\n    ));\n\n  const addedTableRows = addedRows\n    .map((row, rowIndex) => ({\n      key: `${TABLE_ADDED_TYPE}_${rowIndex}`,\n      type: TABLE_ADDED_TYPE,\n      rowId: rowIndex,\n      height: rowHeight,\n      row,\n    }));\n\n  return [\n    ...addedTableRows.reverse(),\n    ...editedTableRows,\n  ];\n};\n","export const TABLE_FILTER_TYPE = 'filter';\n","import { TABLE_FILTER_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isFilterTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_FILTER_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isFilterTableRow = tableRow => tableRow.type === TABLE_FILTER_TYPE;\n","import { TABLE_FILTER_TYPE } from './constants';\n\nexport const tableHeaderRowsWithFilter = (headerRows, rowHeight) =>\n  [...headerRows, { key: TABLE_FILTER_TYPE, type: TABLE_FILTER_TYPE, height: rowHeight }];\n","export const TABLE_GROUP_TYPE = 'group';\n","import { TABLE_GROUP_TYPE } from './constants';\n\nexport const isGroupTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n  && tableRow.row.groupedBy === tableColumn.column.name;\nexport const isGroupIndentTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n  && tableRow.row.groupedBy !== tableColumn.column.name;\nexport const isGroupTableRow = tableRow => tableRow.type === TABLE_GROUP_TYPE;\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_GROUP_TYPE } from './constants';\n\nconst tableColumnsWithDraftGrouping =\n  (tableColumns, grouping, draftGrouping, showColumnWhenGrouped) => tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type !== TABLE_DATA_TYPE) {\n        acc.push(tableColumn);\n        return acc;\n      }\n\n      const columnName = tableColumn.column.name;\n      const columnGroupingExists = grouping\n        .some(columnGrouping => columnGrouping.columnName === columnName);\n      const columnDraftGroupingExists = draftGrouping\n        .some(columnGrouping => columnGrouping.columnName === columnName);\n\n      if ((!columnGroupingExists && !columnDraftGroupingExists)\n        || showColumnWhenGrouped(columnName)) {\n        acc.push(tableColumn);\n      } else if ((!columnGroupingExists && columnDraftGroupingExists)\n        || (columnGroupingExists && !columnDraftGroupingExists)) {\n        acc.push({\n          ...tableColumn,\n          draft: true,\n        });\n      }\n      return acc;\n    }, []);\n\nexport const tableColumnsWithGrouping = (\n  columns,\n  tableColumns,\n  grouping,\n  draftGrouping,\n  indentColumnWidth,\n  showColumnWhenGrouped,\n) => [\n  ...grouping.map((columnGrouping) => {\n    const groupedColumn = columns.find(column => column.name === columnGrouping.columnName);\n    return {\n      key: `${TABLE_GROUP_TYPE}_${groupedColumn.name}`,\n      type: TABLE_GROUP_TYPE,\n      column: groupedColumn,\n      width: indentColumnWidth,\n    };\n  }),\n  ...tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped),\n];\n\nexport const tableRowsWithGrouping = (tableRows, isGroupRow) =>\n  tableRows.map((tableRow) => {\n    if (tableRow.type !== TABLE_DATA_TYPE || !isGroupRow(tableRow.row)) {\n      return tableRow;\n    }\n    return {\n      ...tableRow,\n      key: `${TABLE_GROUP_TYPE}_${tableRow.row.compoundKey}`,\n      type: TABLE_GROUP_TYPE,\n      colSpanStart: `${TABLE_GROUP_TYPE}_${tableRow.row.groupedBy}`,\n    };\n  });\n","import { TABLE_HEADING_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isHeadingTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isHeadingTableRow = tableRow => (tableRow.type === TABLE_HEADING_TYPE);\n","import { TABLE_HEADING_TYPE } from './constants';\n\nexport const tableRowsWithHeading = headerRows =>\n  [{ key: TABLE_HEADING_TYPE, type: TABLE_HEADING_TYPE }, ...headerRows];\n","export const TABLE_DETAIL_TYPE = 'detail';\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isDetailRowExpanded = (expandedDetailRowIds, rowId) =>\n  expandedDetailRowIds.indexOf(rowId) > -1;\nexport const isDetailToggleTableCell = (tableRow, tableColumn) =>\n  tableColumn.type === TABLE_DETAIL_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isDetailTableRow = tableRow => tableRow.type === TABLE_DETAIL_TYPE;\n","export const toggleDetailRowExpanded = (prevExpanded, { rowId, state }) => {\n  const expandedDetailRowIds = prevExpanded.slice();\n  const expandedIndex = expandedDetailRowIds.indexOf(rowId);\n  const rowState = state !== undefined ? state : expandedIndex === -1;\n\n  if (expandedIndex > -1 && !rowState) {\n    expandedDetailRowIds.splice(expandedIndex, 1);\n  } else if (expandedIndex === -1 && rowState) {\n    expandedDetailRowIds.push(rowId);\n  }\n\n  return expandedDetailRowIds;\n};\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithExpandedDetail = (tableRows, expandedDetailRowIds, rowHeight) => {\n  let result = tableRows;\n  expandedDetailRowIds\n    .forEach((expandedRowId) => {\n      const rowIndex = result.findIndex(tableRow =>\n        tableRow.type === TABLE_DATA_TYPE && tableRow.rowId === expandedRowId);\n      if (rowIndex === -1) return;\n      const insertIndex = rowIndex + 1;\n      const { row, rowId } = result[rowIndex];\n      result = [\n        ...result.slice(0, insertIndex),\n        {\n          key: `${TABLE_DETAIL_TYPE}_${rowId}`,\n          type: TABLE_DETAIL_TYPE,\n          rowId,\n          row,\n          colSpanStart: 0,\n          height: rowHeight,\n        },\n        ...result.slice(insertIndex),\n      ];\n    });\n  return result;\n};\n\nexport const tableColumnsWithDetail = (tableColumns, toggleColumnWidth) => [\n  { key: TABLE_DETAIL_TYPE, type: TABLE_DETAIL_TYPE, width: toggleColumnWidth },\n  ...tableColumns,\n];\n","export const TABLE_SELECT_TYPE = 'select';\n","import { TABLE_SELECT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\n\nexport const isSelectTableCell = (tableRow, tableColumn) =>\n  tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isSelectAllTableCell = (tableRow, tableColumn) =>\n  tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_HEADING_TYPE;\n","import { TABLE_SELECT_TYPE } from './constants';\n\nexport const tableColumnsWithSelection = (tableColumns, selectionColumnWidth) => [\n  { key: TABLE_SELECT_TYPE, type: TABLE_SELECT_TYPE, width: selectionColumnWidth },\n  ...tableColumns,\n];\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\n\nexport const isNoDataTableRow = tableRow => tableRow.type === TABLE_NODATA_TYPE;\nexport const isDataTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isHeaderStubTableCell = (tableRow, headerRows) => headerRows.indexOf(tableRow) > -1;\nexport const isDataTableRow = tableRow => tableRow.type === TABLE_DATA_TYPE;\n","export const getColumnExtension = (columnExtensions, columnName) => {\n  if (!columnExtensions) {\n    return {};\n  }\n  const columnExtension = columnExtensions.find(extension => extension.columnName === columnName);\n  if (!columnExtension) {\n    return {};\n  }\n  return columnExtension;\n};\n\nexport const getColumnExtensionValueGetter = (columnExtensions, extensionName, defaultValue) =>\n  (columnName) => {\n    if (columnExtensions) {\n      const columnExtension = getColumnExtension(columnExtensions, columnName);\n      const extensionValue = columnExtension[extensionName];\n      return extensionValue !== undefined ? extensionValue : defaultValue;\n    }\n    return defaultValue;\n  };\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\nimport { getColumnExtension } from '../../utils/column-extension';\n\nexport const tableColumnsWithDataRows = (columns, columnExtensions) =>\n  columns.map((column) => {\n    const { name } = column;\n    const columnExtension = getColumnExtension(columnExtensions, name);\n    return {\n      key: `${TABLE_DATA_TYPE}_${name}`,\n      type: TABLE_DATA_TYPE,\n      width: columnExtension.width,\n      align: columnExtension.align,\n      column,\n    };\n  });\n\nexport const tableRowsWithDataRows = (rows, getRowId) => (\n  !rows.length\n    ? [{ key: TABLE_NODATA_TYPE, type: TABLE_NODATA_TYPE, colSpanStart: 0 }]\n    : rows.map((row) => {\n      const rowId = getRowId(row);\n      return {\n        row,\n        rowId,\n        type: TABLE_DATA_TYPE,\n        key: `${TABLE_DATA_TYPE}_${rowId}`,\n      };\n    }));\n","import { TABLE_DATA_TYPE } from './../table/constants';\n\nexport const visibleTableColumns = (tableColumns, hiddenColumnNames) =>\n  tableColumns.filter(tableColumn =>\n    tableColumn.type !== TABLE_DATA_TYPE ||\n    hiddenColumnNames.indexOf(tableColumn.column.name) === -1);\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableDataColumnsExist = tableColumns =>\n  tableColumns.some(column => column.type === TABLE_DATA_TYPE);\n","export const columnChooserItems = (columns, hiddenColumnNames) =>\n  columns.map(column => ({ column, hidden: hiddenColumnNames.indexOf(column.name) !== -1 }));\n","export const toggleColumn = (hiddenColumnNames, columnName) => (\n  hiddenColumnNames.indexOf(columnName) === -1\n    ? [...hiddenColumnNames, columnName]\n    : hiddenColumnNames.filter(hiddenColumn => hiddenColumn !== columnName)\n);\n","export const changeSearchValue = (prevSearchValue, searchValue) => searchValue;\n\nexport const pushSearchFilterExpression = searchValue => ({ filterExpression, columns }) => {\n  const filters = columns.map(({ name }) => ({ columnName: name, value: searchValue }));\n  const selfFilterExpression = { operator: 'or', filters };\n  if (!filterExpression) {\n    return selfFilterExpression;\n  }\n  return {\n    operator: 'and',\n    filters: [filterExpression, selfFilterExpression],\n  };\n};\n","export const getTargetColumnGeometries = (columnGeometries, sourceIndex) => {\n  const sourceWidth = columnGeometries[sourceIndex].right - columnGeometries[sourceIndex].left;\n  const getWidthDifference = index =>\n    columnGeometries[index].right - columnGeometries[index].left - sourceWidth;\n\n  return columnGeometries\n    .map(({\n      top, right, bottom, left,\n    }, targetIndex) => {\n      let leftBorder = left;\n      if (targetIndex > 0 && targetIndex <= sourceIndex) {\n        leftBorder = Math.min(leftBorder, leftBorder - getWidthDifference(targetIndex - 1));\n      }\n      if (targetIndex > sourceIndex) {\n        leftBorder = Math.max(leftBorder, leftBorder + getWidthDifference(targetIndex));\n      }\n      let rightBorder = right;\n      if (targetIndex < columnGeometries.length - 1 && targetIndex >= sourceIndex) {\n        rightBorder = Math.max(rightBorder, rightBorder + getWidthDifference(targetIndex + 1));\n      }\n      if (targetIndex < sourceIndex) {\n        rightBorder = Math.min(rightBorder, rightBorder - getWidthDifference(targetIndex));\n      }\n\n      return {\n        top,\n        right: rightBorder,\n        bottom,\n        left: leftBorder,\n      };\n    });\n};\n","import { easeOutCubic } from '@devexpress/dx-core';\nimport { getTargetColumnGeometries } from './column-geometries';\n\nexport const getTableRowColumnsWithColSpan = (tableColumns, colSpanStart) => {\n  if (colSpanStart === undefined) return tableColumns;\n\n  let span = false;\n  return tableColumns\n    .reduce((acc, tableColumn, columnIndex) => {\n      if (span) return acc;\n      if (columnIndex === colSpanStart || tableColumn.key === colSpanStart) {\n        span = true;\n        return [...acc, { ...tableColumn, colSpan: tableColumns.length - columnIndex }];\n      }\n      return [...acc, tableColumn];\n    }, []);\n};\n\nexport const getTableColumnGeometries = (columns, tableWidth) => {\n  const columnWidths = columns\n    .map(column => column.width);\n\n  const freeSpace = tableWidth;\n  const restrictedSpace = columnWidths\n    .reduce((accum, width) => accum + (width || 0), 0);\n  const freeSpacePortions = columnWidths\n    .reduce((accum, width) => accum + (width === undefined ? 1 : 0), 0);\n  const freeSpacePortion = (freeSpace - restrictedSpace) / freeSpacePortions;\n\n  let lastRightPosition = 0;\n  return columnWidths\n    .map(width => (width === undefined ? freeSpacePortion : width))\n    .map((width) => {\n      lastRightPosition += width;\n      return {\n        left: lastRightPosition - width,\n        right: lastRightPosition,\n      };\n    });\n};\n\nexport const getTableTargetColumnIndex = (columnGeometries, sourceIndex, offset) =>\n  getTargetColumnGeometries(columnGeometries, sourceIndex)\n    .findIndex(({ left, right }) => offset > left && offset < right);\n\n\nconst ANIMATION_DURATION = 200;\n\nconst getAnimationProgress = animation =>\n  (new Date().getTime() - animation.startTime) / ANIMATION_DURATION;\n\nexport const getAnimations = (\n  prevColumns,\n  nextColumns,\n  tableWidth,\n  prevAnimations,\n) => {\n  const prevColumnGeometries = new Map(getTableColumnGeometries(prevColumns, tableWidth)\n    .map((geometry, index) => [prevColumns[index].key, geometry])\n    .map(([key, geometry]) => {\n      const animation = prevAnimations.get(key);\n      if (!animation) return [key, geometry];\n      const progress = easeOutCubic(getAnimationProgress(animation));\n      const left = ((animation.left.to - animation.left.from) * progress) + animation.left.from;\n      return [key, {\n        left,\n        right: geometry.right - (geometry.left - left),\n      }];\n    }));\n\n  const nextColumnGeometries = new Map(getTableColumnGeometries(nextColumns, tableWidth)\n    .map((geometry, index) => [nextColumns[index].key, geometry]));\n\n  return new Map([...nextColumnGeometries.keys()]\n    .map((key) => {\n      const prev = prevColumnGeometries.get(key);\n      const next = nextColumnGeometries.get(key);\n\n      const result = { startTime: new Date().getTime(), style: {} };\n      if (Math.abs(prev.left - next.left) > 1) {\n        result.left = { from: prev.left, to: next.left };\n      }\n      return [key, result];\n    })\n    .filter(animation => animation[1].left));\n};\n\nexport const filterActiveAnimations = animations => new Map([...animations.entries()]\n  .filter(([, animation]) => getAnimationProgress(animation) < 1));\n\nexport const evalAnimations = animations => new Map([...animations.entries()]\n  .map(([key, animation]) => {\n    const progress = easeOutCubic(getAnimationProgress(animation));\n    const result = { ...animation.style };\n    if (animation.left) {\n      const offset = (animation.left.to - animation.left.from) * (progress - 1);\n      result.transform = `translateX(${offset}px)`;\n    }\n    return [key, result];\n  }));\n","import { getTargetColumnGeometries } from './column-geometries';\n\nconst isOnTheSameLine = (geometry, y) => y >= geometry.top && y <= geometry.bottom;\n\nconst rectToObject = ({\n  top, right, bottom, left,\n}) => ({\n  top, right, bottom, left,\n});\n\nconst collapseGapsBetweenItems = geometries =>\n  geometries.map((geometry, index) => {\n    if (index !== geometries.length - 1 && geometry.top === geometries[index + 1].top) {\n      return {\n        ...geometry,\n        right: geometries[index + 1].left,\n      };\n    }\n    return geometry;\n  });\n\nexport const getGroupCellTargetIndex = (geometries, sourceIndex, { x, y }) => {\n  if (geometries.length === 0) return 0;\n\n  const targetGeometries = sourceIndex !== -1\n    ? getTargetColumnGeometries(geometries, sourceIndex)\n    : geometries.map(rectToObject);\n\n  const targetIndex = collapseGapsBetweenItems(targetGeometries)\n    .findIndex((geometry, index) => {\n      const inVerticalBounds = isOnTheSameLine(geometry, y);\n      const inHorizontalBounds = x >= geometry.left && x <= geometry.right;\n      const shouldGoFirst = index === 0 && x < geometry.left;\n      const shouldGoOnLineBreak = !inVerticalBounds &&\n        !!geometries[index - 1] &&\n        isOnTheSameLine(geometries[index - 1], y);\n\n      return (inVerticalBounds && inHorizontalBounds) ||\n        shouldGoFirst ||\n        shouldGoOnLineBreak;\n    });\n\n  return targetIndex === -1 ? geometries.length : targetIndex;\n};\n","const processPattern = (pattern, params) =>\n  Object.keys(params).reduce(\n    (msg, key) =>\n      msg.replace(`{${key}}`, params[key]),\n    pattern,\n  );\n\nexport const getMessagesFormatter = messages => (key, params) => {\n  const message = messages[key];\n\n  if (typeof message === 'function') {\n    return message(params);\n  }\n  if (params) {\n    return processPattern(message, params);\n  }\n  return message;\n};\n"],"names":["rowIdGetter","getRowId","rows","map","Map","row","rowIndex","get","defaultGetCellValue","columnName","cellValueGetter","getCellValue","columns","useFastAccessor","reduce","acc","column","name","changeColumnSorting","state","direction","keepOther","sortIndex","sorting","nextSorting","slice","Array","isArray","filter","indexOf","columnSorting","columnSortingIndex","findIndex","newColumnSorting","splice","newIndexFallback","length","newIndex","undefined","unique","Set","arr","getColumnSortingDirection","s","getPersistentSortedColumns","columnExtensions","sortingEnabled","sortItem","push","calculateKeepOther","persistentSortedColumns","item","merge","array","auxiliary","lo","mid","hi","compare","i","j","k","cmp","sortArrayToAuxiliary","Math","floor","sortAuxiliaryToArray","a","b","result","NODE_CHECK","Symbol","rowsToTree","getRowLevelKey","levels","children","forEach","levelKey","levelIndex","level","root","node","treeToRows","tree","defaultCompare","createCompare","getColumnCompare","getComparableValue","reverse","prevCompare","inverse","columnCompare","aRow","bRow","sortTree","sortedTree","mergeSort","sortHierarchicalRows","sortedRows","isGroupRow","groupedBy","value","changeColumnFilter","filters","config","filterIndex","f","nextState","pushFilterExpression","filterExpression","selfFilterExpr","operator","getColumnFilterConfig","_","AND","predicates","predicate","OR","operators","or","and","toLowerCase","String","defaultPredicate","filterTree","filteredChildren","filterHierarchicalRows","filteredTree","collapsedRows","buildPredicate","initialFilterExpression","getColumnPredicate","getSimplePredicate","customPredicate","getOperatorPredicate","build","getPredicate","filteredRows","Object","keys","GROUP_KEY_SEPARATOR","applyColumnGrouping","grouping","groupIndex","nextGrouping","groupingIndex","g","targetIndex","changeColumnGrouping","expandedGroups","ungroupedColumnIndex","group","index","filteredExpandedGroups","split","toggleExpandedGroups","groupKey","groupKeyIndex","draftColumnGrouping","draftGrouping","cancelColumnGroupingDraft","GRID_GROUP_TYPE","GRID_GROUP_CHECK","GRID_GROUP_LEVEL_KEY","groupRowChecker","groupRowLevelKeyGetter","defaultColumnCriteria","groupedRows","getColumnCriteria","keyPrefix","groupCriteria","groups","key","sameKeyItems","set","nestedGrouping","values","items","compoundKey","expandedGroupRows","groupingColumnNames","columnGrouping","expandedGroupsSet","currentGroupExpanded","currentGroupLevel","groupLevel","has","customGroupedRows","currentRows","getChildGroups","rootRows","childRows","customGroupingRowIdGetter","firstRow","find","groupingPanelItems","c","some","setCurrentPage","prevPage","page","setPageSize","prevPageSize","size","PAGE_HEADERS_OVERFLOW_ERROR","paginatedRows","pageSize","rowsWithPageHeaders","headerRows","currentIndex","headerIndex","headerRow","Error","indexInPage","pageCount","count","ceil","rowCount","firstRowOnPage","currentPage","totalCount","lastRowOnPage","totalRowCount","toggleSelection","selection","rowIds","rowIdsSet","rowsState","availableSelection","rowId","selectionSet","rowsWithAvailableToSelect","dataRows","availableToSelect","someSelected","elem","allSelected","unwrapSelectedRows","startEditRows","prevEditingRowIds","stopEditRows","rowIdSet","id","addRow","addedRows","changeAddedRow","change","cancelAddedRows","indexSet","changeRow","prevRowChanges","prevChange","cancelChanges","deleteRows","deletedRowIds","cancelDeletedRows","changedRowsByIds","changes","addedRowsByIds","defaultCreateRowChange","createRowChangeGetter","createRowChange","columnExtension","getRowChange","rowChanges","TABLE_REORDERING_TYPE","changeColumnOrder","order","sourceColumnName","targetColumnName","sourceColumnIndex","targetColumnIndex","newOrder","TABLE_DATA_TYPE","TABLE_NODATA_TYPE","orderedColumns","tableColumns","type","aPos","bPos","tableHeaderRowsWithReordering","tableHeaderRows","draftOrder","sourceColumn","UNSET_COLUMN_WIDTH_ERROR","join","tableColumnsWithWidths","columnWidths","draftColumnWidths","tableColumn","isCurrentColumn","width","replace","MIN_SIZE","changeTableColumnWidth","shift","nextColumnWidth","updatedColumn","max","draftTableColumnWidth","cancelTableColumnWidthDraft","TABLE_EDIT_COMMAND_TYPE","TABLE_ADDED_TYPE","TABLE_EDIT_TYPE","TABLE_HEADING_TYPE","isHeadingEditCommandsTableCell","tableRow","isEditCommandsTableCell","tableColumnsWithEditing","isEditTableCell","isAddedTableRow","isEditTableRow","tableRowsWithEditing","tableRows","editingRowIds","rowHeight","editedTableRows","addedTableRows","TABLE_FILTER_TYPE","isFilterTableCell","isFilterTableRow","tableHeaderRowsWithFilter","height","TABLE_GROUP_TYPE","isGroupTableCell","isGroupIndentTableCell","isGroupTableRow","tableColumnsWithDraftGrouping","showColumnWhenGrouped","columnGroupingExists","columnDraftGroupingExists","tableColumnsWithGrouping","indentColumnWidth","groupedColumn","tableRowsWithGrouping","isHeadingTableCell","isHeadingTableRow","tableRowsWithHeading","TABLE_DETAIL_TYPE","isDetailRowExpanded","expandedDetailRowIds","isDetailToggleTableCell","isDetailTableRow","toggleDetailRowExpanded","prevExpanded","expandedIndex","rowState","tableRowsWithExpandedDetail","expandedRowId","insertIndex","tableColumnsWithDetail","toggleColumnWidth","TABLE_SELECT_TYPE","isSelectTableCell","isSelectAllTableCell","tableColumnsWithSelection","selectionColumnWidth","isNoDataTableRow","isDataTableCell","isHeaderStubTableCell","isDataTableRow","getColumnExtension","extension","getColumnExtensionValueGetter","extensionName","defaultValue","extensionValue","tableColumnsWithDataRows","align","tableRowsWithDataRows","colSpanStart","visibleTableColumns","hiddenColumnNames","tableDataColumnsExist","columnChooserItems","hidden","toggleColumn","hiddenColumn","changeSearchValue","prevSearchValue","searchValue","pushSearchFilterExpression","selfFilterExpression","getTargetColumnGeometries","columnGeometries","sourceIndex","sourceWidth","right","left","getWidthDifference","top","bottom","leftBorder","min","rightBorder","getTableRowColumnsWithColSpan","span","columnIndex","colSpan","getTableColumnGeometries","tableWidth","freeSpace","restrictedSpace","accum","freeSpacePortions","freeSpacePortion","lastRightPosition","getTableTargetColumnIndex","offset","ANIMATION_DURATION","getAnimationProgress","Date","getTime","animation","startTime","getAnimations","prevColumns","nextColumns","prevAnimations","prevColumnGeometries","geometry","progress","easeOutCubic","to","from","nextColumnGeometries","prev","next","style","abs","filterActiveAnimations","animations","entries","evalAnimations","transform","isOnTheSameLine","y","rectToObject","collapseGapsBetweenItems","geometries","getGroupCellTargetIndex","x","targetGeometries","inVerticalBounds","inHorizontalBounds","shouldGoFirst","shouldGoOnLineBreak","processPattern","pattern","params","msg","getMessagesFormatter","message","messages"],"mappings":"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"}